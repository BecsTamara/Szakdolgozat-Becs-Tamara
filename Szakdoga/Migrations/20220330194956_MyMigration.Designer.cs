// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Szakdoga.Data;

#nullable disable

namespace Szakdoga.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220330194956_MyMigration")]
    partial class MyMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cac43a6e-f7bb-4448-baaf-1add431ccbbf",
                            ConcurrencyStamp = "acff618f-a4f9-4d38-af76-1d144b0bc8a6",
                            Name = "Boss",
                            NormalizedName = "BOSS"
                        },
                        new
                        {
                            Id = "cac43a7e-f7cb-4148-baaf-1acb431eabbf",
                            ConcurrencyStamp = "d0d51231-c3a9-4258-baaf-628340ec20f5",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        },
                        new
                        {
                            UserId = "53543ce-822c-457d-9c2a-b5454f39b3b31",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1acb431eabbf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Szakdoga.Data.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            AccessFailedCount = 0,
                            Address = "8900, Zalegerszeg Teszt utca 3.",
                            ConcurrencyStamp = "fb9a628a-4a5f-41e9-b6a9-e2e422efa0f7",
                            Email = "boss@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastLogin = new DateTime(2022, 3, 30, 21, 49, 55, 618, DateTimeKind.Local).AddTicks(3562),
                            LastName = "Boss",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOSS@LOCALHOST.COM",
                            NormalizedUserName = "BOSS@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKUYL4XBF4b4IqclWSAxDiaJ8EV+6Ke5Jnv5nh1tUqYqAvcUCmkvdzuWml1jBZX4vQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f8a515e-647f-4dfa-a2b2-836b315c5344",
                            TwoFactorEnabled = false,
                            UserName = "boss@localhost.com"
                        },
                        new
                        {
                            Id = "53543ce-822c-457d-9c2a-b5454f39b3b31",
                            AccessFailedCount = 0,
                            Address = "8976, Nemesnép Király utca 6.",
                            ConcurrencyStamp = "6fb27ec7-a8ab-43c8-afc9-e11e914cbd1b",
                            Email = "user@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastLogin = new DateTime(2022, 3, 30, 21, 49, 55, 631, DateTimeKind.Local).AddTicks(3700),
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFh9G1MD2j07t+WlQ+Xebcvw3Tz7memvJaMf3hw02KknPq9IwOZIJ2xIXj3sTk6oyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e04ecc71-5422-4ac5-9b1b-72d2a922570d",
                            TwoFactorEnabled = false,
                            UserName = "user@localhost.com"
                        });
                });

            modelBuilder.Entity("Szakdoga.Data.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Adult")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("FoodTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodTypeId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Szakdoga.Data.FoodAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodAllergyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodAllergyTypeId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAllergies");
                });

            modelBuilder.Entity("Szakdoga.Data.FoodAllergyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FoodAllergyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4180),
                            CreatedUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            LastModifyDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4234),
                            LastModifyUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            Name = "Laktóz"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4240),
                            CreatedUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            LastModifyDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4243),
                            LastModifyUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            Name = "Diófélék"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4247),
                            CreatedUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            LastModifyDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4251),
                            LastModifyUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            Name = "Glutén"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4255),
                            CreatedUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            LastModifyDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4257),
                            LastModifyUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            Name = "Alkohol"
                        });
                });

            modelBuilder.Entity("Szakdoga.Data.FoodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FoodTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4387),
                            CreatedUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            LastModifyDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4391),
                            LastModifyUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            Name = "Leves"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4396),
                            CreatedUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            LastModifyDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4399),
                            LastModifyUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            Name = "Ital"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4402),
                            CreatedUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            LastModifyDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4405),
                            LastModifyUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            Name = "Fő étel"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4409),
                            CreatedUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            LastModifyDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4413),
                            LastModifyUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            Name = "Desszert"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4416),
                            CreatedUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            LastModifyDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4420),
                            LastModifyUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            Name = "Savanyúság"
                        });
                });

            modelBuilder.Entity("Szakdoga.Data.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Szakdoga.Data.OrderFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderFoods");
                });

            modelBuilder.Entity("Szakdoga.Data.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Szakdoga.Data.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatsNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4561),
                            CreatedUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            LastModifyDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4566),
                            LastModifyUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            Name = "Kis asztal",
                            SeatsNumber = 4
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4570),
                            CreatedUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            LastModifyDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4573),
                            LastModifyUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            Name = "Közepes asztal",
                            SeatsNumber = 8
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4577),
                            CreatedUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            LastModifyDate = new DateTime(2022, 3, 30, 21, 49, 55, 645, DateTimeKind.Local).AddTicks(4581),
                            LastModifyUserId = "43453ade-4415-4470-bdaa-4653ewq4dd18",
                            Name = "Nagy asztal",
                            SeatsNumber = 12
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Szakdoga.Data.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Szakdoga.Data.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Szakdoga.Data.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Szakdoga.Data.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Szakdoga.Data.Food", b =>
                {
                    b.HasOne("Szakdoga.Data.FoodType", "FoodType")
                        .WithMany()
                        .HasForeignKey("FoodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodType");
                });

            modelBuilder.Entity("Szakdoga.Data.FoodAllergy", b =>
                {
                    b.HasOne("Szakdoga.Data.FoodAllergyType", "FoodAllergyType")
                        .WithMany()
                        .HasForeignKey("FoodAllergyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Szakdoga.Data.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("FoodAllergyType");
                });

            modelBuilder.Entity("Szakdoga.Data.Order", b =>
                {
                    b.HasOne("Szakdoga.Data.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Szakdoga.Data.OrderFood", b =>
                {
                    b.HasOne("Szakdoga.Data.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Szakdoga.Data.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
